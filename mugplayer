#!/usr/bin/php
<?php

define('SYSTEM_PLAYER', '/usr/bin/afplay');
define('DEBUG_MODE', true);
require_once('common/Utility.class');

use \Utility as Util;

### START OF MAIN ###

$app = new MUG_Player();
$app->run();

### END OF MAIN ###


class MUG_Player
{

   const LOG_ENABLED = true;
   public $shortArgs;
   public $longArgs;
   public $commands;
   public $scriptName;
   public $elapsedTime;
   public $startTime;
   public $endTime;
   public $jsonFile;
   public $db;

   public function __construct()
   {
      
       $this->startTime  = microtime(true);
       $this->scriptName = basename(__FILE__);
       $this->shortArgs = "p:b";
       $this->logArgs   = ["play:", "build"];

       $this->jsonFile = sprintf("%s/.mugplayer.json", getenv('HOME'));

       if (file_exists($this->jsonFile))
           $this->load();

       if (!$this->commands  = Util::getArgs($this->shortArgs, $this->logArgs))
          $this->syntax();
   }
   
   public function syntax()
   {
      printf("%s --build    ... builds the ~/Users/%s/.music.json database\n", $this->scriptName, getenv("USER"));
      printf("%s --play tag ... finds music by tag and plays it\n", $this->scriptName);
      exit;
   }

   public function run()
   {
      foreach($this->commands as $cmd => $options)
      {
         $this->log("Process $cmd with $options");

         switch ($cmd)
         {
            case 'build' : $this->build($options); break;
            case 'play'  : $this->play($options); break;
            default : $this->syntax();
         }
  
      }
   }

   private function load()
   {

      $this->db = json_decode(file_get_contents($this->jsonFile), true);

      $jsonError = json_last_error();

      if ($jsonError != JSON_ERROR_NONE)
      {
          $this->log("Cannot load {$this->jsonFile}. Error code: $jsonError"); 
          die();
      }
   }

   private function play($tag)
   {

      $matches = [];
      foreach($this->db as $entry)
      {
          if (preg_match("/$tag/", $entry['path']))
          {
              $matches[] = $entry;
          }
      }

      // Only one MP3 matches so play it
      if (count($matches) == 1)
      {
         $target = $matches[0];
         $path   = $target['path'];
         $cmd = sprintf("%s \"%s\" &", SYSTEM_PLAYER, $path);
         $this->log("Run $cmd");
         proc_close(proc_open($cmd, [], $junk));
         

      } else {
 
         $this->log("Show list");
         $this->log($matches);
        
      }

   }

   private function build($options)
   {
      $this->homeDir = getenv("HOME");
      $this->log("Starting to build at " . $this->homeDir);

      if (!$list = Util::findFiles($this->homeDir, '/^.+\.mp3$/i'))
      {
          $this->log("No MP3 files found in {$this->homeDir}");
          return false;
      }
 

      echo "\nTotal files: " . count($list) . "\n";
      $this->log("Total time spent: " . $this->elapsed() . " seconds");

      $data = [];
      foreach($list as $file)
      {
         $data[] = ['path' => $file, 'tags' => []]; 
      }

      $json = json_encode($data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);

      file_put_contents($this->jsonFile, $json);

   }

   private function elapsed()
   {
      return microtime(true) - $this->startTime;
   }
 

   private function log($x)
   {

      if (self::LOG_ENABLED == false)
         return false;

      if (is_array($x) || is_object($x))
      {
          $x = print_r($x, true);
      }

      $logEntry = sprintf("%s: %s - %s\n", date('m/d/y h:i:s'), getmypid(), $x);
      echo $logEntry;
      return true;

   }

} // End of MUG_Player class
