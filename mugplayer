#!/usr/bin/php
<?php
mb_internal_encoding("utf-8");
define('SYSTEM_PLAYER', '/usr/bin/afplay');
define('SYSTEM_PROCESS_KILLER', '/usr/bin/killall');
define('DEBUG_MODE', true);
require_once('common/Utility.class');

use \Utility as Util;

function __($text) { return $text; }

### START OF MAIN ###

$app = new MUG_Player();
$app->run();

### END OF MAIN ###

class MUG_Player
{
   const LOG_ENABLED = true;
   public $id = 'mugplayer';
   public $shortArgs;
   public $longArgs;
   public $commands;
   public $scriptName;
   public $elapsedTime;
   public $startTime;
   public $endTime;
   public $jsonFile;
   public $db;
   private $current;
   private $chosenTrack = null;

   public function __construct()
   {
       $this->startTime  = microtime(true);
       $this->scriptName = basename(__FILE__);
       $this->shortArgs = "p:b";
       $this->logArgs   = ["play:", "build", "stop", "stats", "dups", "find:", "search:", "create:", "add:", "view:", "delete:"];

       $this->jsonFile = sprintf("%s/.mugplayer.json", getenv('HOME'));

       if (file_exists($this->jsonFile))
           $this->load();

       if (!$this->commands  = Util::getArgs($this->shortArgs, $this->logArgs))
          $this->syntax();
   }
   
   public function syntax()
   {
      printf("%s --build                   ... builds the ~/Users/%s/.mugplayer.json database\n", $this->scriptName, getenv("USER"));
      printf("%s --play title|tag|playlist ... plays song by title or tag or entire playlist it\n", $this->scriptName);
      printf("%s --loop title|tag|playlist ... plays song by title or tag or entire playlist until stopped\n", $this->scriptName);
      printf("%s --stop                    ... stop playing\n", $this->scriptName);
      printf("%s --stats                   ... show stats\n", $this->scriptName);
      printf("%s --dups                    ... show dups\n", $this->scriptName);
      printf("%s --create name             ... create a playlist\n", $this->scriptName);
      printf("%s --view name               ... vew a playlist\n", $this->scriptName);
      printf("%s --add title <list>        ... add title to current or named playlist\n", $this->scriptName);
      printf("%s --del title <list>        ... delete title from current or named playlist\n", $this->scriptName);
      exit;
   }

   public function run()
   {
      foreach($this->commands as $cmd => $options)
      {
         switch ($cmd)
         {
            case 'build'  : $this->build($options); break;
            case 'dups'   : $this->build(['write' => false]); break;
            case 'play'   : $this->play($options); break;
            case 'find'   : $this->find($options); break;
            case 'search' : $this->find($options); break;
            case 'create' : $this->create($options); break;
            case 'delete' : $this->delete($options); break;
            case 'view'   : $this->view($options); break;
            case 'stop'   : $this->stop($options); break;
            case 'stats'  : $this->stats(); break;
            default       : $this->syntax();
         }
      }
   }

   private function stats($show = true)
   {
      $stats = [];
      foreach($this->db as $i => $entry)
      {
         if (!empty($entry['stats']))
         {
            $stats[] = [
                          'id'     => $i,
                          'title'  => !empty($entry['meta']['title']) ? $entry['meta']['title'] : basename($entry['path']),
                          'count'  => $entry['stats']['count'],
                          'last_played' => $entry['stats']['last_played']
                       ];
         }
      }

      if (!$stats)
          $this->die(__('No stats found.'));

      $count = array_column($stats, 'count');
      array_multisort($count, SORT_DESC, $stats);

      if (!$show)
          return $stats;

      printf("%s %-60s %s %13s\n", __('No.'), __('Title'), __('Played'), __('Last Played'));
    

      foreach($stats as $i => $r)
      {
         $title = preg_replace("/\.mp3$/i", '', $r['title']);
         $title = mb_substr($title, 0, 60, "utf-8");
         printf("%-3d %s %4d %25s\n", $i+1, Util::mb_str_pad($title, 60, '.'), $r['count'], $r['last_played']);
      }

      return $stats;
   }

   private function load()
   {
      $this->db  = json_decode(file_get_contents($this->jsonFile), true);
      $jsonError = json_last_error();

      if ($jsonError != JSON_ERROR_NONE)
      {
          $this->log("Cannot load {$this->jsonFile}. Error code: $jsonError"); 
          die();
      }
   }

   private function play($tag)
   {
      $this->getChosenTrack($tag);
      $matches  = $this->findSong($tag);
      $matchCnt = count($matches);

      // Only one MP3 matches so play it
      if ($matchCnt == 1)
      {
         $this->current = $matches[0]['entry']['hash']; 
         $this->playSong($matches[0]['entry']['path']);    

      // Hmm, we have more than one match so..
      } else if($matchCnt > 1) {
 
         // If the user hasn't selected one using #n, 
         // show the list of matches 
         if (is_null($this->chosenTrack))
             $this->list($matches);

         // User selected #n track so lets play it
         else {
            $this->current = $matches[$this->chosenTrack]['entry']['hash']; 
            $this->playSong($matches[$this->chosenTrack]['entry']['path']);    
         }
      } 
      
      // Hmm, no match for MP3, so lets find out if a
      // playlist matches the tag
      if (!$matches = $this->findPlaylist($tag))
         $this->log("No MP3 or playlist found for: $tag.");

      $matchCnt = count($matches);

      // Only one MP3 matches so play it
      if ($matchCnt == 1)
      {
         $this->playList($matches[0]);

      } else if($matchCnt > 1) {
 
         // If more than one playlist matches the tag and the
         // user hasn't chosen the playlist using #n, show list
         if (is_null($this->chosenTrack))
             $this->list($matches);

         // User chose a playlist using #n so lets play it
         else {
            $this->playList($matches[$this->chosenTrack]);    
         }        
      } 
   }

   private function find($tag)
   {
      if ($matches = $this->findSong($tag))
          return $this->log("No match found.");

      $this->list($matches);

   }

   private function findPlaylist($tag)
   {
      $matches = [];

      if (preg_match("/^top\-?(\d+)$/i", $tag, $options))
      {
          $max = $options[1];
          $this->chosenPlayList = $tag;
          $stats = $this->stats(false);
          $list = count($stats) > $max ? array_slice($stats, 0, $max) : $stats;
          $matches[] = ['name' => $tag, 'list' => $list, 'count' => count($list)];
          return $matches;
      }

      $this->log("Find playlist using tag: $tag");

      foreach($this->db as $this->current => $entry)
      {
          if (preg_match("/$tag/mi", $entry['meta']['title']))
          {
              $matches[] = ['entry' => $entry, 'index' => $this->current];

          } elseif (preg_match("/$tag/i", $entry['path'])) {

              $matches[] = ['entry' => $entry, 'index' => $this->current];
          }
      }

      return $matches;
   }

   private function findSong($tag)
   {
      $matches = [];

      foreach($this->db as $this->current => $entry)
      {
          if (preg_match("/$tag/mi", $entry['meta']['title']))
          {
              $matches[] = ['entry' => $entry, 'index' => $this->current];

          } elseif (preg_match("/$tag/i", $entry['path'])) {

              $matches[] = ['entry' => $entry, 'index' => $this->current];
          }
      }

      return $matches;
   }

   private function getChosenTrack($tag)
   {
      $this->chosenTrack = null;

      $tag = Util::getLastArg();

      if (!preg_match("/^#(\d+)$/", $tag, $matches))
         return false;

      if (!$matches)
          return false;

      $this->chosenTrack = $matches[1] - 1;

      return $this->chosenTrack;
   }

   private function list($list)
   {
      foreach($list as $i => $r)
      {
         $entry = $r['entry'];
         $index = $r['index'];
         $meta  = $entry['meta'];
         $title = $meta['title'];
         printf("%4d %s\n", $i+1, $title);
      }
   }

   private function playSong($path)
   {
     // Stop the last song
     $this->stop();

     $cmd = sprintf("%s -q 1 \"%s\" &", SYSTEM_PLAYER, $path);
     proc_close(proc_open($cmd, [], $junk));

     $this->db[$this->current]['stats']['count']++;
     $this->db[$this->current]['stats']['last_played'] = date('m/d/Y h:i:s');

     $this->write();
   }

   private function playList($pl)
   {
      $name = $pl['name'];
      $scriptFile = sprintf("%s/.%s-playlist-%s.sh", sys_get_temp_dir(), $this->id, $pl['name']);
      $list   = $pl['list'];
      $script = "#!/bin/bash\n\n";
      $script .= "# Playlist: $name\n";
      $script .= "# Created by {$this->id} at " . date('m/d/y h:i:s A T') . "\n";
      $script .= "# YouTube channel: https://macuser.group\n";
      $script .= "##########################################\n\n";

      $timeFlag = (DEBUG_MODE) ? '-t 10' : '';

      foreach($list as $i => $r)
      {
         $id      = $r['id'];
         $title   = $r['title'];
         $entry   = $this->db[$id];
         $path    = $entry['path'];
         $cnt     = $i + 1;
         $cmd     = sprintf("%s %s -q 1 \"%s\";", SYSTEM_PLAYER, $timeFlag, $path);
         $script .= "# Play song #{$cnt}: $title  ($id)\n";

         if (DEBUG_MODE)
             $script .= sprintf("/usr/bin/osascript -e 'display notification \"Playing: $title\"'\n");

         $script .= $cmd . "\n\n";
      }

      if (DEBUG_MODE)
         $script .= sprintf("/usr/bin/osascript -e 'display notification \"Playlist: $name completed\"'\n");

      $script .= "# Remove the playlist shell script\n";
      $script .= '/bin/rm -- "$0"' . "\n";

      file_put_contents($scriptFile, $script);

      $this->log("Playing playlist: $name");
      $this->_exec('/bin/bash ' . $scriptFile);
   
   }

   private function stop($options = null)
   {
      $descriptorspec = [ 
                           0 => ["pipe", "r"],  // STDIN
                           1 => ["pipe", "w"],  // STDOUT
                           2 => ["pipe", "w"],  // STDERR
                        ];
      $cwd = getcwd();
      $env = null;
      $cmd = sprintf("%s afplay", SYSTEM_PROCESS_KILLER);
      $process = proc_open($cmd, $descriptorspec, $pipes, $cwd, $env);

      if (is_resource($process))
          proc_close($process);
   }

   private function build($options)
   {
      $this->homeDir = getenv("HOME");
      $this->log("Looking for MP3 from dir: " . $this->homeDir);

      if (!$list = Util::findFiles($this->homeDir, '/^.+\.mp3$/i'))
      {
          $this->log("No MP3 files found in {$this->homeDir}");
          return false;
      }
 

      echo "\nTotal files: " . count($list) . "\n";
      $this->log("Total time spent: " . $this->elapsed() . " seconds");

      $data = [];
      $dups = [];
      foreach($list as $file)
      {
   
         $key = Util::getFileHash($file);

         if (!empty($data[$key]))
         {
            $existing = $data[$key]['path'];
            $dups[] = ['original' => $existing, 'duplicate' => $file];
         } else
            $data[$key] = ['path' => $file, 'hash' => $key, 'meta' => $this->getMeta($file)]; 
      }

      if (!empty($dups) && !empty($options) && $options['write'] == false)
      {
          $this->log($dups);
          return false;
      }

      $this->db = $data;
      $this->write();

   }

   private function create($name)
   {
      $this->log("Create a playlist called $name");
   }

   private function add($name)
   {
      $this->log("Add $name to current playlist {$this->currentPlayList}");
   }

   private function delete($name)
   {
      $this->log("Delete $name to current playlist {$this->currentPlayList}");
   }

   private function view($name)
   {
      $this->log("View $name to current playlist {$this->currentPlayList}");
   }

   private function write()
   {
      $this->log("Writing {$this->jsonFile}");
      $json = json_encode($this->db, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
      file_put_contents($this->jsonFile, $json);
   }

   private function getMeta($path)
   {
       $title = preg_replace("/\.mp3$/i", '', basename($path));
       $data  = ['title' => $title];

       return $data;
   }

   private function elapsed()
   {
      return microtime(true) - $this->startTime;
   }
 

   private function log($x)
   {

      if (self::LOG_ENABLED == false)
         return false;

      if (is_array($x) || is_object($x))
      {
          $x = print_r($x, true);
      }

      $logEntry = sprintf("%s: %s - %s\n", date('m/d/y h:i:s'), getmypid(), $x);
      echo $logEntry;
      return true;

   }

   private function _exec($cmd, $bg = true)
   {
      $cwd = getcwd();
      $env = null;

      if ($bg)
          $cmd .= ' &';

      $process = proc_open($cmd, [], $pipes, $cwd, $env);
   }

   private function die($msg)
   {
      die($msg); 
   }

} // End of MUG_Player class
